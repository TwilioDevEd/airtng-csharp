.chapter(data-title='Voice Conference and Broadcast')
  .step(data-title='Introduction', data-file='AirTNG.Web/Domain/Reservations/Notifier.cs', data-highlight='32-39')
    :markdown
      ## Workflow Automation - Vacation Rental example

      ![Airtng](http://howtodocs.s3.amazonaws.com/airtng-screen.png)

      At its core this use-case is about enabling your service providers
      (agents, hosts, customer service reps, administrators, etc) to better
      serve their customer. To illustrate a very real-world example of this
      use-case we will implement a webapp for finding and booking vacation
      properties--we're calling it Airtng. Here's how it works:

      1. A host creates a vacation property
      2. A guest requests a reservation on that property
      3. The host receives an SMS notifying them of the recent reservation request. The host can either Accept or Reject the reservation.
      4. The guest is notified that their reservation was either accepted or rejected.

      ## Building Blocks

      We'll be using the Twilio REST API to implement this use-case:

      * [Messages Resource](//www.twilio.com/docs/api/rest/sending-messages): We
      will use Twilio directly to send our users messages at important
      junctures.

      Let's get started! Click the right arrow to move on to the next step of
      the tutorial.

  .step(data-title='Authentication', data-file='AirTNG.Web/Models/IdentityModels.cs', data-highlight='10-24')
    :markdown
      ## Authentication

      For this workflow to work, we have to handle authentication, for this
      purpose we're going to rely on _ASP.NET Identity_.

      Each `User` will need to have a `phone_number` which will be required to send sms notifications later. Otherwise for our purposes we can use a pretty standard user model.

      **See Also:**
      * [Introduction to ASP.NET Identity](//www.asp.net/identity/overview/getting-started/introduction-to-aspnet-identity)

  .step(data-title='Vacation Property', data-file='AirTNG.Web/Models/VacationProperty.cs', data-highlight='6-15')
    :markdown
      ## Vacation Property
      In order to build a true vacation rentals company we'll need a way to
      create the property listings.

      The `VacationProperty` belongs to the `User` who created it (we'll call
      this user the _host_ moving forward) and contains only two properties: a
      `Description` and an `ImageUrl`.

      A `VacationProperty` could have many `Reservations`.

      **See Also:**

      * [Entity Framework Code First to a New Database](//msdn.microsoft.com/en-us/data/jj193542.aspx)

  .step(data-title='Reservation', data-file='AirTNG.Web/Models/Reservation.cs', data-highlight='6-17')
    :markdown
      ## Reservation

      The `Reservation` model is at the center of the workflow for this
      application.

      It is responsible for keeping track of:

      * The `VacationProperty` it is associated with.
      * The `User` who owns that vacation property (the host). Through this
      property will have access to its phone number.
      * The `Status` of the reservation

      **See Also:**

      * [Entity Framework Code First to a New Database](//msdn.microsoft.com/en-us/data/spx)
      * [Relationships and Navigation Properties](//msdn.microsoft.com/en-us/data/jj713564.aspx)

  .step(data-title="Reservation Creation", data-file='AirTNG.Web/Controllers/ReservationsController.cs', data-highlight='56-80')
    :markdown
      ## Reservation Creation

      The reservation creation form holds only one field, the message that will
      be sent to the _host_ user when reserving one of his properties. The rest
      of the information necessary to create a reservation is taken from the
      vacation property associated with.

      A reservation is created with a default status
      `ReservationStatus.Pending`, so when the _host_ replies with an `accept`
      or `reject` response, the application knows which reservation the _host_
      is referring to.

      In the next step we'll take a look at how the SMS notification is sent to
      the host when the reservation is created.

      **See Also:**

      * [Using Asynchronous Methods in ASP.NET MVC 4](//www.asp.net/mvc/overview/performance/using-asynchronous-methods-in-aspnet-mvc-4)

  .step(data-title='Notifying The Host', data-file='AirTNG.Web/Domain/Reservations/Notifier.cs', data-highlight='32-39')
    :markdown
      ## Notifying The Host

      When a reservation is created, we want to notify the owner of said
      property that someone has made a reservation.

      This is where we use [Twilio C# Helper
      Library](//www.twilio.com/docs/csharp/install) to send a SMS message to
      the _host_, using our [Twilio phone
      number](//www.twilio.com/user/account/phone-numbers/incoming).

      As you can see, sending SMS messages using Twilio is just a few lines of
      code. Now we just have to wait for the host to send an SMS
      response accepting or rejecting the reservation, so we can notify the
      guest and host that the reservation information is updated accordingly.

      The next step shows how to handle and configure the host's SMS response.

      **See Also:**

      * [Twilio Rest API](//www.twilio.com/docs/api/rest)
      * [SMS and MMS Quickstart Tutorial](//www.twilio.com/docs/quickstart/csharp/sms/sending-via-rest)

  .step(data-title='Handling Incoming Messages', data-file='AirTNG.Web/Controllers/ReservationsController.cs', data-highlight='82-111')
    :markdown
      ## Handling Incoming Messages

      Let's take a closer look at the `Reservations/Handle` controller. This controller
      handles our incoming Twilio request and does three things:

      1. Checks for a pending reservation from the incoming user.
      2. Updates the status of the reservation.
      3. Responds to the host and sends notification to the guest.

  .step(data-title='Incoming Twilio Request', data-file='AirTNG.Web/Controllers/ReservationsController.cs', data-highlight='82-111')
    :markdown
      ## Incoming Twilio Request

      In your [Twilio
      number](//www.twilio.com/user/account/phone-numbers/incoming) you must
      setup the sms web hook to call your application's end point in the route
      `Reservations/Handle`. Remember to to expose your development machine to
      the outside world using [ngrok](//ngrok.com/). The url for the sms
      web hook on your number should look like this:

      ```
      http://<subdomain>.ngrok.io/Reservations/Handle
      ```

      An incoming request from Twilio comes with some helpful
      [parameters](//www.twilio.com/docs/api/twiml/sms/twilio_request#request-parameters).
      These include the `from` phone number and the message `body`.

      We'll use the `from` parameter to lookup the host and check if she has any
      pending reservations. If she does, we'll use the message body to check if
      she accepted or rejected the reservation.

      In the last step, we'll use [Twilio's
      TwiML](//github.com/twilio/twilio-csharp/wiki/Twilio.Api#smsmessage-sendmessage-from-to-body)
      as a response to Twilio's server instructing it to send a SMS messages to
      the _guest_.

  .step(data-title='TwiML Response', data-file='AirTNG.Web/Controllers/ReservationsController.cs', data-highlight='113-119')
    :markdown
      ## TwiML Response
      After updating the reservation status, we must notify the _host_ that he/she
      has successfully confirmed or rejected the reservation, or if there are no
      pending reservations for that user, send a SMS saying this.

      Also, if the reservation is _confirmed_ or _rejected_ we send an
      additional SMS to the guest to inform the decision the host made,
      regarding the property reservation.

      We use the verb [Message](//www.twilio.com/docs/api/twiml/sms/message)
      from TwiML to instruct Twilio's server that it should send the SMS
      messages.

      **See Also:**

      * [Twilio.TwiML Basic Usage](//github.com/twilio/twilio-csharp/wiki/Twilio.TwiML#basic-usage)

  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      Congrats! You just learned how to automate your workflow with Twilio SMS.

      To improve upon this you could add anonymous communications so that the
      host and guest could communicate through a shared Twilio phone number.
      Hmmm... maybe we'll have to put together a tutorial on that.

      If you're a .NET developer working with Twilio, you might enjoy these
      other tutorials:

      [**IVR: Phone Tree**](//www.twilio.com/docs/tutorials/walkthrough/ivr-phone-tree/csharp/mvc)

      Easily route callers to the right people and information with an IVR
      (interactive voice response) system.

      [**Automated Survey**](//www.twilio.com/docs/tutorials/walkthrough/automated-survey/csharp/mvc)

      Instantly collect structured data from your users with a survey conducted
      over a voice call or SMS text messages.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.

      ![Airtng](http://howtodocs.s3.amazonaws.com/airtng-screen2.png)
